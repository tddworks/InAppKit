//
//  PurchaseOptionCard.swift
//  InAppKit
//
//  Purchase option card component for paywall - displays pricing and billing info
//

import SwiftUI
import StoreKit

// MARK: - Styling Constants

private enum CardStyle {
    static let cornerRadius: CGFloat = 14
    static let horizontalPadding: CGFloat = 20
    static let verticalPadding: CGFloat = 16
    static let contentSpacing: CGFloat = 16
    static let contentVerticalSpacing: CGFloat = 4
    static let featuresSpacing: CGFloat = 2
    static let featuresTopPadding: CGFloat = 2

    static let selectionIndicatorSize: CGFloat = 20
    static let selectionIndicatorFillSize: CGFloat = 10
    static let selectionIndicatorStroke: CGFloat = 2
    static let selectedStrokeWidth: CGFloat = 2
    static let unselectedStrokeWidth: CGFloat = 1

    static let selectedScale: CGFloat = 1.02
    static let animationDuration: Double = 0.15

    // Font sizes
    static let titleFontSize: CGFloat = 16
    static let descriptionFontSize: CGFloat = 13
    static let priceFontSize: CGFloat = 18
    static let billingPeriodFontSize: CGFloat = 12
    static let badgeFontSize: CGFloat = 10
    static let savingsFontSize: CGFloat = 10
    static let featureFontSize: CGFloat = 11

    // Badge styling
    static let badgeHorizontalPadding: CGFloat = 8
    static let badgeVerticalPadding: CGFloat = 2
}

struct PurchaseOptionCard: View {
    let product: Product
    let isSelected: Bool
    let onSelect: () -> Void

    // Optional marketing enhancements
    let badge: String?
    let badgeColor: Color?
    let features: [String]?
    let savings: String?

    init(
        product: Product,
        isSelected: Bool,
        onSelect: @escaping () -> Void,
        badge: String? = nil,
        badgeColor: Color? = nil,
        features: [String]? = nil,
        savings: String? = nil
    ) {
        self.product = product
        self.isSelected = isSelected
        self.onSelect = onSelect
        self.badge = badge
        self.badgeColor = badgeColor
        self.features = features
        self.savings = savings
    }
    
    private var productDescription: String {
        // Use user-defined description from StoreKit if available
        if !product.description.isEmpty && product.description != product.displayName {
            return product.description
        }

        // Fallback to auto-generated description for trial info and basic details
        return autoGeneratedDescription
    }

    private var autoGeneratedDescription: String {
        switch product.type {
        case .autoRenewable:
            if let subscription = product.subscription {
                var description = ""

                // Add trial info if available
                if let intro = subscription.introductoryOffer,
                   intro.paymentMode == .freeTrial {
                    let trialLength = periodText(intro.period, style: .descriptive)
                    description += "\(trialLength) free trial • "
                }

                // Add subscription period
                let period = subscription.subscriptionPeriod
                description += "\(periodText(period, style: .billing)) subscription"

                return description
            }
            return "purchase.subscription.description".localized(fallback: "Subscription • Auto-renewable")
        case .nonConsumable:
            return "purchase.lifetime.description".localized(fallback: "One-time purchase • Lifetime access")
        case .consumable:
            return "purchase.consumable.description".localized(fallback: "Consumable purchase")
        default:
            return "purchase.unknown.description".localized(fallback: "In-app purchase")
        }
    }

    private var billingPeriod: String {
        switch product.type {
        case .autoRenewable:
            if let subscription = product.subscription {
                return periodText(subscription.subscriptionPeriod, style: .billing)
            }
            return "purchase.subscription.type".localized(fallback: "Subscription")
        case .nonConsumable:
            return "purchase.lifetime.type".localized(fallback: "Lifetime")
        case .consumable:
            return "purchase.consumable.type".localized(fallback: "Per use")
        default:
            return "purchase.unknown.type".localized(fallback: "Purchase")
        }
    }

    private func periodText(_ period: Product.SubscriptionPeriod, style: PeriodTextStyle = .billing) -> String {
        let unit = period.unit
        let value = period.value

        switch style {
        case .billing:
            switch unit {
            case .day:
                return value == 1 ? "Daily" : "\(value)-day"
            case .week:
                return value == 1 ? "Weekly" : "\(value)-week"
            case .month:
                return value == 1 ? "Monthly" : "\(value)-month"
            case .year:
                return value == 1 ? "Annual" : "\(value)-year"
            @unknown default:
                return "Periodic"
            }
        case .descriptive:
            switch unit {
            case .day:
                return value == 1 ? "Daily" : "Every \(value) days"
            case .week:
                return value == 1 ? "Weekly" : "Every \(value) weeks"
            case .month:
                return value == 1 ? "Monthly" : "Every \(value) months"
            case .year:
                return value == 1 ? "Yearly" : "Every \(value) years"
            @unknown default:
                return "Periodic"
            }
        }
    }

    private enum PeriodTextStyle {
        case billing     // "Monthly", "Annual"
        case descriptive // "Every month", "Every year"
    }

    var body: some View {
        PurchaseOptionCardView(
            title: product.displayName,
            description: productDescription,
            price: product.displayPrice,
            billingPeriod: billingPeriod,
            badge: badge,
            badgeColor: badgeColor,
            features: features,
            savings: savings,
            isSelected: isSelected,
            onSelect: onSelect
        )
    }
}

// MARK: - Shared UI Component

private struct PurchaseOptionCardView: View {
    let title: String
    let description: String
    let price: String
    let billingPeriod: String
    let badge: String?
    let badgeColor: Color?
    let features: [String]?
    let savings: String?
    let isSelected: Bool
    let onSelect: () -> Void

    var body: some View {
        Button(action: onSelect) {
            HStack(spacing: CardStyle.contentSpacing) {
                // Selection indicator
                ZStack {
                    Circle()
                        .stroke(isSelected ? Color.blue : Color.gray.opacity(0.3), lineWidth: CardStyle.selectionIndicatorStroke)
                        .frame(width: CardStyle.selectionIndicatorSize, height: CardStyle.selectionIndicatorSize)
                        .background(
                            Circle()
                                .fill(isSelected ? Color.blue.opacity(0.1) : Color.clear)
                        )

                    if isSelected {
                        Circle()
                            .fill(Color.blue)
                            .frame(width: CardStyle.selectionIndicatorFillSize, height: CardStyle.selectionIndicatorFillSize)
                    }
                }

                VStack(alignment: .leading, spacing: CardStyle.contentVerticalSpacing) {
                    HStack {
                        Text(title)
                            .font(.system(size: CardStyle.titleFontSize, weight: .semibold))
                            .foregroundColor(.primary)

                        if let badge = badge {
                            Text(badge)
                                .font(.system(size: CardStyle.badgeFontSize, weight: .bold))
                                .foregroundColor(.white)
                                .padding(.horizontal, CardStyle.badgeHorizontalPadding)
                                .padding(.vertical, CardStyle.badgeVerticalPadding)
                                .background(
                                    Capsule()
                                        .fill(badgeColor ?? (badge.lowercased().contains("popular") ? Color.orange : Color.blue))
                                )
                        }

                        Spacer()
                    }

                    Text(description)
                        .font(.system(size: CardStyle.descriptionFontSize, weight: .medium))
                        .foregroundColor(.secondary)

                    if let features = features, !features.isEmpty {
                        VStack(alignment: .leading, spacing: CardStyle.featuresSpacing) {
                            ForEach(features.prefix(2), id: \.self) { feature in
                                HStack(spacing: 4) {
                                    Text("•")
                                        .foregroundColor(.secondary)
                                        .font(.system(size: CardStyle.featureFontSize))
                                    Text(feature)
                                        .font(.system(size: CardStyle.featureFontSize))
                                        .foregroundColor(.secondary)
                                }
                            }
                        }
                        .padding(.top, CardStyle.featuresTopPadding)
                    }
                }

                Spacer()

                VStack(alignment: .trailing, spacing: CardStyle.featuresSpacing) {
                    Text(price)
                        .font(.system(size: CardStyle.priceFontSize, weight: .bold))
                        .foregroundColor(.primary)

                    if let savings = savings {
                        Text(savings)
                            .font(.system(size: CardStyle.savingsFontSize, weight: .semibold))
                            .foregroundColor(.green)
                    }

                    Text(billingPeriod)
                        .font(.system(size: CardStyle.billingPeriodFontSize, weight: .medium))
                        .foregroundColor(.secondary)
                }
            }
            .padding(.horizontal, CardStyle.horizontalPadding)
            .padding(.vertical, CardStyle.verticalPadding)
            .background(
                RoundedRectangle(cornerRadius: CardStyle.cornerRadius)
                    .fill(isSelected ? Color.blue.opacity(0.06) : Color(NSColor.controlBackgroundColor))
                    .overlay(
                        RoundedRectangle(cornerRadius: CardStyle.cornerRadius)
                            .stroke(isSelected ? Color.blue.opacity(0.4) : Color.gray.opacity(0.15),
                                   lineWidth: isSelected ? CardStyle.selectedStrokeWidth : CardStyle.unselectedStrokeWidth)
                    )
            )
        }
        .buttonStyle(PlainButtonStyle())
        .scaleEffect(isSelected ? CardStyle.selectedScale : 1.0)
        .animation(.easeInOut(duration: CardStyle.animationDuration), value: isSelected)
    }
}

// MARK: - Preview

#if DEBUG
#Preview("Purchase Option Cards") {
    VStack(spacing: 20) {
        VStack(spacing: 8) {
            Text("PurchaseOptionCard Preview")
                .font(.title2.bold())

            Text("Different states and configurations")
                .font(.caption)
                .foregroundColor(.secondary)
        }

        VStack(spacing: 12) {
            // Standard monthly subscription with trial
            PurchaseOptionCardView(
                title: "Pro Monthly",
                description: "7 days free trial • Monthly subscription",
                price: "$9.99",
                billingPeriod: "Monthly",
                badge: nil,
                badgeColor: nil,
                features: ["Cloud sync", "Premium filters"],
                savings: nil,
                isSelected: false,
                onSelect: { print("Selected: Pro Monthly") }
            )

            // Popular annual plan with savings
            PurchaseOptionCardView(
                title: "Pro Annual",
                description: "Annual subscription • Auto-renewable",
                price: "$99.99",
                billingPeriod: "Yearly",
                badge: "Most Popular",
                badgeColor: .orange,
                features: ["Cloud sync", "Premium filters", "Priority support"],
                savings: "Save 30%",
                isSelected: true,
                onSelect: { print("Selected: Pro Annual") }
            )

            // Lifetime purchase option
            PurchaseOptionCardView(
                title: "Pro Lifetime",
                description: "One-time purchase • Lifetime access",
                price: "$199.99",
                billingPeriod: "Lifetime",
                badge: "Best Value",
                badgeColor: .green,
                features: ["All features included", "Lifetime updates"],
                savings: nil,
                isSelected: false,
                onSelect: { print("Selected: Pro Lifetime") }
            )
        }

        VStack(spacing: 4) {
            Text("Features Demonstrated:")
                .font(.caption.bold())
                .foregroundColor(.secondary)

            VStack(alignment: .leading, spacing: 2) {
                Text("• Selection states (selected/unselected)")
                Text("• Marketing badges (Most Popular, Best Value)")
                Text("• Savings indicators (Save 30%)")
                Text("• Feature lists with bullet points")
                Text("• Different product types (subscription, lifetime)")
                    .font(.caption2)
                    .foregroundColor(.secondary)
            }
            .font(.caption2)
            .foregroundColor(.secondary)
        }
        .padding(.top, 8)
    }
    .padding()
    .background(Color(NSColor.windowBackgroundColor))
}
#endif
